<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Option 1: Restoring Graviton2 MySQL RDS database from x86 snapshot on Graviton2</title>
    <link>/en/amazonrds/01_snapshot.html</link>
    <description>Recent content in Option 1: Restoring Graviton2 MySQL RDS database from x86 snapshot on Graviton2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 10 Apr 2020 11:14:51 -0600</lastBuildDate><atom:link href="/en/amazonrds/01_snapshot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create RDS MySQL instance</title>
      <link>/en/amazonrds/01_snapshot/creatingcluster8.html</link>
      <pubDate>Fri, 10 Apr 2020 11:14:51 -0600</pubDate>
      
      <guid>/en/amazonrds/01_snapshot/creatingcluster8.html</guid>
      <description>Start by reviewing contents of the RDS MySQL 8 CDK stack definition in file graviton2_labs/rds_graviton/rds_mysql_8.py
 db_mysql8 = rds.DatabaseInstance(self, &amp;quot;MySQL8&amp;quot;, engine=rds.DatabaseInstanceEngine.mysql( version=rds.MysqlEngineVersion.VER_8_0_21 ), instance_type=ec2.InstanceType(&amp;quot;m5.4xlarge&amp;quot;), vpc=vpc, multi_az=False, publicly_accessible=True, allocated_storage=100, storage_type=rds.StorageType.IO1, iops=5000, cloudwatch_logs_exports=[&amp;quot;error&amp;quot;, &amp;quot;general&amp;quot;, &amp;quot;slowquery&amp;quot;], deletion_protection=False, enable_performance_insights=True, delete_automated_backups=True, backup_retention=core.Duration.days(1), parameter_group=rds.ParameterGroup.from_parameter_group_name( self, &amp;quot;para-group-mysql&amp;quot;, parameter_group_name=&amp;quot;default.mysql8.0&amp;quot; ) )  Use of AWS Cloud Development Kit (CDK) greatly simplifies instantiation of AWS services such as Amazon RDS. Above Python code fragment allows you instantiate single-AZ RDS MySQL 8 instance with 100GB IO1 Amazon EBS volume.</description>
    </item>
    
    <item>
      <title>Import Sample Database</title>
      <link>/en/amazonrds/01_snapshot/loadingdata.html</link>
      <pubDate>Fri, 10 Apr 2020 11:14:51 -0600</pubDate>
      
      <guid>/en/amazonrds/01_snapshot/loadingdata.html</guid>
      <description>Before we start this lab, please make sure you are working in your graviton2-labs folder. If you are not, please change to the folder by executing the following command in your bash shell :  cd ~/environment/graviton2-labs/ We&amp;rsquo;ll start by cloning a sample database for MySQL.
git clone https://github.com/datacharmer/test_db.git cd test_db After you have done this, please connect to your MySQL instance. Run the following command to connect to your MySQL instance:  mysql -h $DBHOST -P $DBPORT -u$DBUSER -p$DBPASS If you are experiencing log in issues due to the lack of environment variables, please use the following commands to set the credentials.</description>
    </item>
    
    <item>
      <title>Restore your snapshot to Graviton2 instance</title>
      <link>/en/amazonrds/01_snapshot/restoringrds.html</link>
      <pubDate>Fri, 10 Apr 2020 11:14:51 -0600</pubDate>
      
      <guid>/en/amazonrds/01_snapshot/restoringrds.html</guid>
      <description>We&amp;rsquo;re ready to restore our database to new Graviton2-based instance. Start by reviewing contents of the RDS MySQL 8 database definition in file graviton2_labs/rds_graviton/ds_restore.py
 snapshot_id = ssm.StringParameter.value_for_string_parameter(self ,&amp;quot;graviton_rds_lab_snapshot&amp;quot;) g2_db_mysql8 = rds.DatabaseInstanceFromSnapshot(self, &amp;quot;GravitonMySQL&amp;quot;, engine=rds.DatabaseInstanceEngine.mysql( version=rds.MysqlEngineVersion.VER_8_0_21 ), instance_type=ec2.InstanceType(&amp;quot;m6g.4xlarge&amp;quot;), snapshot_identifier=snapshot_id, vpc=vpc, multi_az=False, publicly_accessible=True, allocated_storage=100, storage_type=rds.StorageType.IO1, iops=5000, cloudwatch_logs_exports=[&amp;quot;error&amp;quot;, &amp;quot;general&amp;quot;, &amp;quot;slowquery&amp;quot;], enable_performance_insights=True, deletion_protection=False, delete_automated_backups=True, backup_retention=core.Duration.days(1), vpc_subnets={ &amp;quot;subnet_type&amp;quot;: ec2.SubnetType.PUBLIC }, parameter_group=rds.ParameterGroup.from_parameter_group_name( self, &amp;quot;para-group-mysql&amp;quot;, parameter_group_name=&amp;quot;default.mysql8.0&amp;quot; ) )  We&amp;rsquo;ll use the snapshot we created from original x86 instance to restore new Graviton2 database.</description>
    </item>
    
  </channel>
</rss>
